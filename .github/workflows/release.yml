name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Test with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.out
        fail_ci_if_error: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release@22 \
          @semantic-release/changelog@6 \
          @semantic-release/git@10 \
          @semantic-release/github@9 \
          @semantic-release/exec@6 \
          conventional-changelog-conventionalcommits@7
    
    - name: Get next version
      id: version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        OUTPUT=$(semantic-release --dry-run 2>&1 || true)
        echo "$OUTPUT" | tail -n 50
        VERSION=$(echo "$OUTPUT" | sed -nE 's/.*[Nn]ext release version is v?([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' | head -n1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Next version will be: $VERSION"      

    - name: Build binaries
      if: steps.version.outputs.version != ''
      run: |
        mkdir -p dist
        VERSION=${{ steps.version.outputs.version }}
        # Build into per-OS directories with binary named 'unfold' (or 'unfold.exe' on Windows)
        mkdir -p dist/linux-amd64 dist/darwin-amd64 dist/darwin-arm64 dist/windows-amd64
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-s -w -X main.Version=v$VERSION" -o dist/linux-amd64/unfold ./cmd/unfold
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags="-s -w -X main.Version=v$VERSION" -o dist/darwin-amd64/unfold ./cmd/unfold
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags="-s -w -X main.Version=v$VERSION" -o dist/darwin-arm64/unfold ./cmd/unfold
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -trimpath -ldflags="-s -w -X main.Version=v$VERSION" -o dist/windows-amd64/unfold.exe ./cmd/unfold

        # Package as archives with OS-specific filenames for unique assets; binaries inside are named 'unfold'
        tar -C dist/linux-amd64 -czf dist/unfold-linux-amd64.tar.gz unfold
        tar -C dist/darwin-amd64 -czf dist/unfold-darwin-amd64.tar.gz unfold
        tar -C dist/darwin-arm64 -czf dist/unfold-darwin-arm64.tar.gz unfold
        (cd dist/windows-amd64 && zip -9 ../unfold-windows-amd64.zip unfold.exe)


    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release 